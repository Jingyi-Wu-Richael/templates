# The template to use as entrypoint
entrypoint: main
arguments:
  parameters:
  - name: workspace-name
    displayName: CVAT Workspace name
    value: 'My CVAT Workspace'
  - name: workspace-template-uid
    value: 'cvat'
    type: hidden
  - name: workspace-node-pool
    displayName: CVAT Workspace node pool
    value: Standard_NC6
  - name: cvat-task-name
    displayName: CVAT task name
    value: 'CVAT Task'
  - name: cvat-task-labels
    displayName: CVAT task labels
    type: textarea.textarea
    value: |
      [
        {
          "name": "person"
        }, 
        {
          "name": "car"
        }
      ]
  - name: sync-directory	
    displayName: Directory to sync raw input and training output	
    value: workflow-data	
    hint: Location to sync raw input, models and checkpoints from default object storage. Note that this will be relative to the current namespace.	
  - name: input-directory	
    displayName: Raw input directory	
    value: raw-input/100MEDIA
    hint: Location of input directory relative to sync directory above.

  - name: sys-data-volume-size
    hint: Disk size in MB for volume mounted at `/home/django/data`
    required: true
    type: input.number
    displayName: Disk size for "data"
    value: "20480"
    
  - name: sys-share-volume-size
    displayName: Disk size for "share"
    hint: Disk size in MB for volume mounted at `/home/django/share`
    required: true
    type: input.number
    value: "20480"  
    
templates:
- name: main
  dag:
    tasks:
    - name: launch-workspace
      template: launch-workspace
    - name: create-cvat-task
      template: create-cvat-task
      dependencies: [launch-workspace]
      arguments:
          parameters:
            - name: workspace-uid
              value: "{{tasks.launch-workspace.outputs.parameters.workspace-uid}}"
    - name: set-cvat-task-data
      template: set-cvat-task-data
      dependencies: [create-cvat-task]
      arguments:
        parameters:
          - name: workspace-uid
            value: "{{tasks.launch-workspace.outputs.parameters.workspace-uid}}"
          - name: task-id
            value: "{{tasks.create-cvat-task.outputs.parameters.task-id}}"
- name: launch-workspace
  outputs:
    parameters:
    - name: workspace-uid
      valueFrom:
        path: /tmp/task.txt
  script:
    image: python:3.7-alpine
    command: [python, '-u']
    source: |
      import os
      import subprocess
      import sys
      from time import sleep
      
      # Install onepanel-sdk
      subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'onepanel-sdk==0.12.0rc0'])
      
      import onepanel.core.api
      from onepanel.core.api.rest import ApiException
      from onepanel.core.api.models import Parameter
      
      # Get mounted service account token to use as API Key
      with open('/var/run/secrets/kubernetes.io/serviceaccount/token') as f:
          token = f.read()
      
      # Configure API key authorization: Bearer
      configuration = onepanel.core.api.Configuration(
          host = os.getenv('ONEPANEL_API_URL'),
          api_key = {
              'Bearer': token
          }
      )
      configuration.api_key_prefix['Bearer'] = 'Bearer'
      
      # Enter a context with an instance of the API client
      with onepanel.core.api.ApiClient(configuration) as api_client:
          # Create an instance of the API class
          api_instance = onepanel.core.api.WorkspaceServiceApi(api_client)
          namespace = os.getenv('ONEPANEL_RESOURCE_NAMESPACE')
          params = []
          params.append(Parameter(name='sys-name', value='{{workflow.parameters.workspace-name}}'))
          params.append(Parameter(name='sys-node-pool', value='{{workflow.parameters.workspace-node-pool}}'))
          params.append(Parameter(name='sync-directory', value='{{workflow.parameters.sync-directory}}'))
          params.append(Parameter(name='sys-data-volume-size', value='{{workflow.parameters.sys-data-volume-size}}'))
          params.append(Parameter(name='sys-share-volume-size', value='{{workflow.parameters.sys-share-volume-size}}'))
        
          body = onepanel.core.api.CreateWorkspaceBody(
                parameters=params,
                workspace_template_uid = '{{workflow.parameters.workspace-template-uid}}',
            ) 
          try:
              workspace = api_instance.create_workspace(namespace, body)
              uid = workspace.uid
              while workspace.status.phase != 'Running':
                  workspace = api_instance.get_workspace(namespace, uid)
                  sleep(15)
                  
                  
              # Write the data to the file so we can use it as a parameter in the workflow
              with open("/tmp/task.txt", "w+") as f:
                f.write(uid)  
                
          except ApiException as e:
              print("Exception when calling WorkspaceServiceApi->create_workspace: %s\n" % e)
- name: create-cvat-task
  inputs:
    parameters:
      - name: workspace-uid
  outputs:
    parameters:
    - name: task-id
      valueFrom:
        path: /tmp/task.txt
  script:
    image: python:3.7-alpine
    command: [python, '-u'] 
    source: |
      import os
      import subprocess
      import sys
      import http.client
      import json
      
      # Install onepanel-sdk
      subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'onepanel-sdk==0.12.0rc0'])
      
      import onepanel.core.api
      from onepanel.core.api.rest import ApiException
      from onepanel.core.api.models import Parameter
      
      # Get mounted service account token to use as API Key
      with open('/var/run/secrets/kubernetes.io/serviceaccount/token') as f:
          token = f.read()
      
      conn = http.client.HTTPSConnection('{{inputs.parameters.workspace-uid}}--' + os.getenv('ONEPANEL_RESOURCE_NAMESPACE') + '.' + os.getenv('ONEPANEL_DOMAIN'))
      headers = {
      'onepanel-auth-token': token,
      'onepanel-username': 'workflow',
      'Content-Type': 'application/json',
      }
      task = {}
      task['name'] = '{{workflow.parameters.cvat-task-name}}'
      task['labels'] = json.loads('''{{workflow.parameters.cvat-task-labels}}''')
      conn.request("POST", "/api/v1/tasks", json.dumps(task), headers)
      res = conn.getresponse()
      data = res.read()
      
      data_json = json.loads(data)
      
      # Write the data to the file so we can use it as a parameter in the workflow
      with open("/tmp/task.txt", "w+") as f:
          f.write(str(data_json['id']))
          
      print('CVAT Task created.\n')
      
- name: set-cvat-task-data
  inputs:
    parameters:
      - name: workspace-uid
      - name: task-id
  script:
    image: python:3.7-alpine
    command: [python, '-u'] 
    source: |
      import os
      import subprocess
      import sys
      import http.client
      import json
      import urllib.parse
      import time
      
      # Install onepanel-sdk
      subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'onepanel-sdk==0.12.0rc0'])
      
      import onepanel.core.api
      from onepanel.core.api.rest import ApiException
      from onepanel.core.api.models import Parameter
      
      # Get mounted service account token to use as API Key
      with open('/var/run/secrets/kubernetes.io/serviceaccount/token') as f:
          token = f.read()
      
      print('Processing files...\n')
      
      workspace_url = '{{inputs.parameters.workspace-uid}}--' + os.getenv('ONEPANEL_RESOURCE_NAMESPACE') + '.' + os.getenv('ONEPANEL_DOMAIN')
      
      conn = http.client.HTTPSConnection(workspace_url)
      headers = {
      'onepanel-auth-token': token,
      'onepanel-username': 'workflow',
      'Content-Type': 'application/json',
      }
      
      
      ready = False
      while not ready:
        time.sleep(5)
        conn.request('GET', '/sys/filesyncer/api/status', "", headers)
        res = conn.getresponse()
        data = res.read()
        if data is not None:
          try:
            download_status = json.loads(data)
        
            if download_status['LastDownload'] is not None:
              ready = True
          except Exception as e:
            pass
      

      data_url = '/api/v1/tasks/{{inputs.parameters.task-id}}/data'
      params = urllib.parse.urlencode({
          'image_quality': 70, 
          'use-zip-chunks': True, 
          'server_files[0]': '/{{workflow.parameters.input-directory}}/'
      })
      
      headers = {
          'onepanel-auth-token': token,
          'onepanel-username': 'workflow',
          'Content-type': 'application/x-www-form-urlencoded',
      }
      
      conn.request('POST', data_url, params, headers)
      res = conn.getresponse()
      data = res.read()
      
      
      status_check_url = '/api/v1/tasks/{{inputs.parameters.task-id}}/status?scheme=json'
      ready = False
      while not ready:
        time.sleep(5)
        conn.request('GET', status_check_url, "", headers)
        res = conn.getresponse()
        data = res.read()
        if data is not None:
          try:
            status = json.loads(data)
        
            if status['state'] is not None and status['state'] == 'Finished':
              ready = True
          except Exception as e:
            pass
            
      print('Finished processing files\n')