entrypoint: main
arguments:
    parameters:
    - name: source
      value: https://github.com/onepanelio/templates
    - name: revision
      value: master
    - displayName: Configuration
      hint: NNI configuration
      type: select.select
      name: config
      value: config.yaml
      required: true
      options:
      - name: 'CPU'
        value: config.yaml
      - name: 'GPU'
        value: config-gpu.yaml
    - displayName: Node pool
      hint: Name of node pool or group to run this workflow task
      type: select.select
      name: sys-node-pool
      value: Standard_D4s_v3
      required: true
      options:
      - name: 'CPU: 4, RAM: 16GB'
        value: Standard_D4s_v3
      - name: 'GPU: 1xV100, CPU: 6, RAM: 56GB'
        value: Standard_NC6s_v3
    
volumeClaimTemplates:
  - metadata:
      name: hyperparamtuning-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi
  - metadata:
      name: hyperparamtuning-output
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi

templates:
  - name: main
    dag:
      tasks:
      - name: hyperparameter-tuning
        template: hyperparameter-tuning
      - name: workflow-metrics-writer
        template: workflow-metrics-writer
        dependencies: [hyperparameter-tuning]
        arguments:
          # Use sys-metrics artifact output from hyperparameter-tuning Task
          artifacts:
          - name: best-metrics
            from: "{{tasks.hyperparameter-tuning.outputs.artifacts.sys-metrics}}"
  - name: hyperparameter-tuning
    inputs:
      artifacts:
        - git:
            repo: '{{workflow.parameters.source}}'
            revision: '{{workflow.parameters.revision}}'
          name: src
          path: /mnt/data/src
    outputs:
      artifacts:
      - name: model
        path: /mnt/output
        optional: true
        archive:
          none: {}
    container:
      image: onepanel/dl:0.17.0
      args:
      - --config
      - '/mnt/data/src/workflows/nni-hyperparameter-tuning/mnist/{{workflow.parameters.config}}'
      workingDir: /mnt
      volumeMounts:
      - name: hyperparamtuning-data
        mountPath: /mnt/data
      - name: hyperparamtuning-output
        mountPath: /mnt/output
    nodeSelector:
      beta.kubernetes.io/instance-type: '{{workflow.parameters.sys-node-pool}}'
    sidecars:
      - name: nni-web-ui
        image: 'onepanel/nni-proxy:0.0.1'
        env:
          - name: ONEPANEL_INTERACTIVE_SIDECAR
            value: 'true'
        ports:
          - containerPort: 9000
            name: nni
  - name: workflow-metrics-writer
    inputs:
      artifacts:
      - name: best-metrics
        path: /tmp/sys-metrics.json
    script:
      image: onepanel/python-sdk:v0.16.0
      command: [python, '-u']
      source: |
        import os
        import json

        import onepanel.core.api
        from onepanel.core.api.models.metric import Metric
        from onepanel.core.api.rest import ApiException
        from onepanel.core.api.models import Parameter

        # Load Task A metrics
        with open('/tmp/sys-metrics.json') as f:
            metrics = json.load(f)

        with open('/var/run/secrets/kubernetes.io/serviceaccount/token') as f:
            token = f.read()

        # Configure API authorization
        configuration = onepanel.core.api.Configuration(
            host = os.getenv('ONEPANEL_API_URL'),
            api_key = {
                'authorization': token
            }
        )
        configuration.api_key_prefix['authorization'] = 'Bearer'

        # Call SDK method to save metrics
        with onepanel.core.api.ApiClient(configuration) as api_client:
            api_instance = onepanel.core.api.WorkflowServiceApi(api_client)
            namespace = '{{workflow.namespace}}'
            uid = '{{workflow.name}}'
            body = onepanel.core.api.AddWorkflowExecutionsMetricsRequest()
            body.metrics = metrics
            try:
                api_response = api_instance.add_workflow_execution_metrics(namespace, uid, body)
                print('Metrics added.')
            except ApiException as e:
                print("Exception when calling WorkflowServiceApi->add_workflow_execution_metrics: %s\n" % e)