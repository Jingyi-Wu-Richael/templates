arguments:
  parameters:
  - name: source
    value: https://github.com/onepanelio/models-1.git
 
  - name: trainingsource
    value: https://github.com/onepanelio/cvat-training.git
 
#path to directory that contains (tfrecord and labelmap) for evaluation
  - name: eval-dataset-path
    value: annotation-dump/sample_eval_dataset
    hint: "Default value is for demo purpose only. Please enter path which exists in cloud storage (i.e s3)"

#various parameters for computation of confusion matrix
  - name: confusion-params
    value: "iou_threshold=0.5,conf_threshold=0.5"
 
  - name: metrics-type
    value: tf-od-api
    displayName: Type of Evaluation
    type: select.select
    required: false
    options:
    - name: 'TF OD API Evaluation'
      value: tf-od-api
    - name: 'Confusion Matrix (TFRecord)'
      value: confusion-matrix
 
#how many images to visualize during evaluation
  - name: num-visualizations
    value: 0
 
  - name: revision
    value: onepanel
 
#where to store evaluation result
  - name: eval-result-path
    value: workflow-data/output/demo_eval_path/
 
  - name: eval-model-path
    value: workflow-data/output/demo_trained_model/
    hint: "Default value is for demo purpose only. Please enter path which exists in cloud storage (i.e s3)" 
 
  - name: tf-image
    value: tensorflow/tensorflow:1.13.1-gpu-py3
    type: select.select
    options:
    - name: 'Tensorflow 1.13.1 CPU Image'
      value: 'tensorflow/tensorflow:1.13.1-py3'
    - name: 'Tensorflow 1.13.1 GPU Image'
      value: 'tensorflow/tensorflow:1.13.1-gpu-py3'
 
#currently, cvat dumps data with default.tfrecord name, it may change, so take it from user
  - name: record-name
    value: default.tfrecord
 
# metrics to use for TF OD API
  - displayName: TF Metric Type 
    hint: Which metric to use for evaluation
    type: select.select
    name: tf-metrics-type
    value: pascal_voc_detection_metrics
    required: false
    options:
    - name: 'Pascal Detection Metrics'
      value: pascal_voc_detection_metrics
    - name: 'Coco Detection Metrics'
      value: coco_detection_metrics
    - name: 'Weighted Pascal Detection Metrics'
      value: weighted_pascal_voc_detection_metrics
    - name: 'OID Detection Metrics'
      value: oid_V2_detection_metrics
    - name: 'OID Challenge Detection Metrics'
      value: oid_challenge_detection_metrics
 
  - displayName: Node pool
    hint: Name of node pool or group
    type: select.nodepool
    name: sys-node-pool
    value: Standard_D4s_v3
    required: true

entrypoint: main
templates:
- dag:
    tasks:
    - name: eval-model
      template: tensorflow
# Uncomment the lines below if you want to send Slack notifications
#    - arguments:
#        artifacts:
#        - from: '{{tasks.train-model.outputs.artifacts.sys-metrics}}'
#          name: metrics
#        parameters:
#        - name: status
#          value: '{{tasks.train-model.status}}'
#      dependencies:
#      - train-model
#      name: notify-in-slack
#      template: slack-notify-success
  name: main
- container:
    args:
    - |
      apt-get update && \
      apt-get install -y python3-pip git wget unzip libglib2.0-0 libsm6 libxext6 libxrender-dev && \
      pip install pillow lxml Cython contextlib2 jupyter matplotlib numpy scipy boto3 pycocotools pandas && \
      cd /mnt/src/tf/research && \
      export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim && \
      cd /mnt/src/train && \
      python tf_api_eval.py record_name={{workflow.parameters.record-name}},metrics_type={{workflow.parameters.metrics-type}},tf_metrics_type={{workflow.parameters.tf-metrics-type}},num_visualizations={{workflow.parameters.num-visualizations}},{{workflow.parameters.confusion-params}}
    command:
    - sh
    - -c
    image: '{{workflow.parameters.tf-image}}'
    volumeMounts:
    - mountPath: /mnt/data
      name: data
    - mountPath: /mnt/output
      name: output
    workingDir: /mnt/src
  nodeSelector:
    beta.kubernetes.io/instance-type: '{{workflow.parameters.sys-node-pool}}'
  inputs:
    artifacts:
    - name: data
      path: /mnt/data/datasets/
      s3:
        key: '{{workflow.namespace}}/{{workflow.parameters.eval-dataset-path}}'
    - name: models
      path: /mnt/data/models/
      s3: 
        key: '{{workflow.namespace}}/{{workflow.parameters.eval-model-path}}'
    - git:
        repo: '{{workflow.parameters.source}}'
        revision: '{{workflow.parameters.revision}}'
      name: src
      path: /mnt/src/tf
    - git:
        repo: '{{workflow.parameters.trainingsource}}'
        revision: debug
      name: tsrc
      path: /mnt/src/train
  name: tensorflow
  outputs:
    artifacts:
    - name: model
      optional: true
      path: /mnt/output
      s3:
        key: '{{workflow.namespace}}/{{workflow.parameters.eval-result-path}}'
# Uncomment the lines below if you want to send Slack notifications
#- container:
#    args:
#    - SLACK_USERNAME=Onepanel SLACK_TITLE="{{workflow.name}} {{inputs.parameters.status}}"
#      SLACK_ICON=https://www.gravatar.com/avatar/5c4478592fe00878f62f0027be59c1bd
#      SLACK_MESSAGE=$(cat /tmp/metrics.json)} ./slack-notify
#    command:
#    - sh
#    - -c
#    image: technosophos/slack-notify
#  inputs:
#    artifacts:
#    - name: metrics
#      optional: true
#      path: /tmp/metrics.json
#    parameters:
#    - name: status
#  name: slack-notify-success
volumeClaimTemplates:
- metadata:
    creationTimestamp: null
    name: data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 200Gi
- metadata:
    creationTimestamp: null
    name: output
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 200Gi
